* DONE add typescript
LOGBOOK:
CLOCK: [2022-03-16 Wed 19:50]--[2022-03-16 Wed 19:57] =>  0:07
:END:
* DONE Create hello world koa server
:LOGBOOK:
CLOCK: [2022-03-16 Wed 20:07]--[2022-03-16 Wed 20:09] =>  0:02
CLOCK: [2022-03-16 Wed 19:57]--[2022-03-16 Wed 20:07] =>  0:10
:END:
* DONE return json in koa
:LOGBOOK:
CLOCK: [2022-03-16 Wed 20:10]--[2022-03-16 Wed 20:12] =>  0:02
:END:
* DONE add unit testing library
:LOGBOOK:
CLOCK: [2022-03-16 Wed 20:13]--[2022-03-16 Wed 20:43] =>  0:30
:END:
- doing tdd
- going to add jest, simple to use and setup
- need to add babel in order to support typescript
* DONE Find xml library
:LOGBOOK:
CLOCK: [2022-03-16 Wed 20:44]--[2022-03-16 Wed 21:07] =>  0:23
:END:
- good xml library that is maintained by the community: https://www.npmjs.com/package/fast-xml-parser
- write test code to fetch the xml and parse it into json
- just make sure there are no errors and the parsing is successful
- logic will be implemented in another commit
- adding http library instead of using the built in node because this will lead to more maintainable code
- experience with the node http library based local implementations is that everyone writes a slightly different API
- much better to use the community maintained axios
  - which is also familiar to frontend devs
- decided to install axios
- added unit test to test getting xml data 
* DONE fetch data from xml endpoint
- the xml data is 1MB
- completed in previous task
* DONE convert xml into pl format
:LOGBOOK:
CLOCK: [2022-03-16 Wed 21:08]--[2022-03-16 Wed 21:25] =>  0:17
:END:
- i want to take the xml data and convert it into something i can manipulate inside my programming language
- this essentially means xml to json since js pl format is just json
- the xml format from the makes endpoint, as a sample
  #+BEGIN_SRC xml
  <?xml version="1.0" encoding="UTF-8"?>
  <Response xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
     <Count>10069</Count>
     <Message>Response returned successfully</Message>
     <Results>
        <AllVehicleMakes>
           <Make_ID>440</Make_ID>
           <Make_Name>ASTON MARTIN</Make_Name>
        </AllVehicleMakes>
     </Results>
  </Response>
  #+END_SRC
  - the format is a list of vehicles with a make_id and a make_name
  - make_id to be used to get more information from the second endpoint
* DONE study output format
- studying the output format in the gist
- we want an array like so:
  #+BEGIN_SRC javascript
  [
      {
          "makeId": "[value]",
          "makeName": "[value]",
          "vehicleTypes": [
              {
                  "typeId": "[value]",
                  "typeName": "[value]",
              },
              {
                  "typeId": "[value]",
                  "typeName": "[value]",
              },
          ]
      }
  ]
  #+END_SRC
- the output for the second endpoint looks like:
  #+BEGIN_SRC xml
  <Response xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <Count>2</Count>
    <Message>Response returned successfully</Message>
    <SearchCriteria>Make ID: 440</SearchCriteria>
    <Results>
      <VehicleTypesForMakeIds>
        <VehicleTypeId>2</VehicleTypeId>
        <VehicleTypeName>Passenger Car</VehicleTypeName>
      </VehicleTypesForMakeIds>
      <VehicleTypesForMakeIds>
        <VehicleTypeId>7</VehicleTypeId>
        <VehicleTypeName>Multipurpose Passenger Vehicle (MPV)</VehicleTypeName>
      </VehicleTypesForMakeIds>
    </Results>
  </Response>
  #+END_SRC
  - the main things to note is that this is a list of items
  - each item has a vehicle type id and a vehicle type name
  - these are the main pieces of information we need to keep for our output data
* TODO convert into output format [0/1]
** TODO write a function where given an input for a single make:
  - all makes item result: VehicleMake
  - vehicle types for make: VehicleTypesForMakeID
  - return the expected output: ExpectedOutputSingle
* DONE write function to get vehicle types for make
:LOGBOOK:
CLOCK: [2022-03-16 Wed 21:41]--[2022-03-16 Wed 21:56] =>  0:15
:END:
- added function
- added test
* TODO create mongodb docker scripts
* TODO store information in mongodb
* TODO expose api
* TODO package into docker compose
* TODO test docker compose version
* EXTRA
** TODO deploy to a hosted site
** TODO add ci
- build, test, push image
** TODO add cd
- pull new image
- update deployment
** TODO Add scheduled job to update data in db
- treat the db as cache
** TODO look into streaming xml parsing for increasing scalability
** TODO add unit tests for all logic functions
** TODO use https for security
** TODO add linter
** TODO move test data to constants file
- allows for security and controls
** TODO Add xml api endpoint data validation against defined schema
- with specific known inputs and outputs
